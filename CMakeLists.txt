cmake_minimum_required (VERSION 3.24)

message(STATUS "Downloading conan_provider.cmake from https://github.com/conan-io/cmake-conan")
file(DOWNLOAD "https://raw.githubusercontent.com/conan-io/cmake-conan/develop2/conan_provider.cmake"
  "${CMAKE_BINARY_DIR}/conan_provider.cmake")

set(CMAKE_PROJECT_TOP_LEVEL_INCLUDES ${CMAKE_BINARY_DIR}/conan_provider.cmake)
project ("OSMPService" CXX)

message("Running with CMake Version ${CMAKE_MAJOR_VERSION}.${CMAKE_MINOR_VERSION}.${CMAKE_PATCH_VERSION}")
message("C++ ${CMAKE_CXX_STANDARD}")
set(CMAKE_CXX_STANDARD 20)
message("C++ ${CMAKE_CXX_STANDARD}")
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_CXX_EXTENSIONS OFF)

message("TEST0")

if(MSVC)
	option(DONT_FORCE_STATIC_LIBS "Building dynamic libraries fails for some targets because of incompatabilities in dependencies (protobuf, see FetchGRPC.cmake) and thus static lib's are enforced. Enable this option to abide CMAKE's BUILD_SHARED_LIBS variable" OFF)
	if(NOT DONT_FORCE_STATIC_LIBS)
		set(BUILD_SHARED_LIBS false)
		message("Forcing the use of static libraries as building dynamic libraries fails for some targets using MSVC because of incompatabilities in some dependencies. Enable DONT_FORCE_STATIC_LIBS to unforce this behaviour")
	endif(NOT DONT_FORCE_STATIC_LIBS)
endif(MSVC)

option(GIT_SUBMODULE "Check submodules during build" ON)
if(GIT_SUBMODULE)
	find_package(Git QUIET)
	if(GIT_FOUND AND EXISTS "${PROJECT_SOURCE_DIR}/.git")
		message(STATUS "Updating submodules")
		execute_process(COMMAND ${GIT_EXECUTABLE} submodule update --init --recursive
						WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}
						RESULT_VARIABLE GIT_SUBMODULE_RESULT)
		if(NOT GIT_SUBMODULE_RESULT EQUAL "0")
			message(FATAL_ERROR "git submodule update --init --recursive failed with ${GIT_SUBMODULE_RESULT}")
		endif()
	endif()
endif()

message("TEST1")

# Somehow, sometimes the conan package's protoc binary is not found by the default find script, so help hinting it:
find_program(Protobuf_PROTOC_EXECUTABLE
    NAMES protoc
    DOC "The Google Protocol Buffers Compiler"
    HINTS
	${CONAN_BIN_DIRS}
)

find_package(protobuf REQUIRED)
find_package(boost REQUIRED)

message("TEST2")

if(Protobuf_PROTOC_EXECUTABLE)# Newer CMake versions define only upper case names
	set(PROTOBUF_PROTOC_EXECUTABLE ${Protobuf_PROTOC_EXECUTABLE})
endif()
set(protobuf::protoc ${Protobuf_PROTOC_EXECUTABLE})

#find_package(Protobuf REQUIRED)
#include_directories(${Protobuf_INCLUDE_DIRS})
#include_directories(${CMAKE_CURRENT_BINARY_DIR})
#set(Protobuf_PROTOC_EXECUTABLE-NOTFOUND TRUE)

message("TEST3 ${PROTOBUF_PROTOC_EXECUTABLE}")

# Findprotobuf.cmake generated by cmake_find_package conan generator is missing some definitons from the default find script, but catch2 is not found without a defintion for find_package
# => We use our own FindCatch2.cmake module
set(CMAKE_MODULE_PATH ${CMAKE_SOURCE_DIR}/CMakeModules ${CMAKE_MODULE_PATH})
#set(CMAKE_PREFIX_PATH ${CMAKE_SOURCE_DIR}/CMakeModules ${CMAKE_MODULE_PATH}) #?

# Read CMake_FetchContent_Overrides for changes of FetchContent_declare default of other included scripts
include(FetchContent)
include(${CMAKE_CURRENT_LIST_DIR}/CMake_FetchContent_Overrides.cmake OPTIONAL)

# OSI is not distributed as conan package, but we already took care of installig its dependency (protobuf), so we can just fetch it
include(FetchOpenSimulationInterface)
message("TEST4")
# use our FetchGRPC.cmake module to add gRPC
set(CMAKE_MODULE_PATH ${CMAKE_SOURCE_DIR}/CMakeModules ${CMAKE_MODULE_PATH})
message("TEST5")
#include(FetchGRPC)
message("TEST6")
# FMI4cpp is not distributed as conan package, but still can use conan for dependency management.
# Still, we aren't using FMI4cpp's conanfile.txt and instead merge its conent into our conanfile.txt to have control of the used conan packages.
# This allows us to unify package versions and remove unneeded options. (libzip:with_openssl introduces dependency on openssl, which collides with gRPC's boringssl)
add_subdirectory(lib/FMI4cpp/ EXCLUDE_FROM_ALL)
message("TEST7")
## main project
# set up variables that are used below
message("TEST8")
add_subdirectory("src")
add_subdirectory("include")
add_subdirectory("test")
message("TEST5")
#create library to
add_library(OSMPServiceLib ${COSIMA_SOURCE} ${COSIMA_INCLUDES})
# OSMPServiceLib exports no symbols, thereby preventing linking of its dll on windows. Force export of all global symbols
set_property(TARGET OSMPServiceLib PROPERTY WINDOWS_EXPORT_ALL_SYMBOLS ON)
target_include_directories(OSMPServiceLib PUBLIC ${CMAKE_CURRENT_LIST_DIR}/include)
# FMI4cpp is not managed by conan, thus it is added here
target_include_directories(OSMPServiceLib PUBLIC fmi4cpp)
target_link_libraries(OSMPServiceLib PUBLIC fmi4cpp)

# OSI is not managed by conan, thus it is added here
target_include_directories(OSMPServiceLib PUBLIC open_simulation_interface_obj)#shared base of both static and shared OSI lib targets
# OSI has differently named targets for static and shared build
if(BUILD_SHARED_LIBS)
	# By default, OSI exports no symbols when building a dll, preventing linking to the shared library on windows. Force export of all global symbols
	set_property(TARGET open_simulation_interface PROPERTY WINDOWS_EXPORT_ALL_SYMBOLS ON)
	target_link_libraries(OSMPServiceLib PUBLIC open_simulation_interface)
else()
	target_link_libraries(OSMPServiceLib PUBLIC open_simulation_interface_static)
endif(BUILD_SHARED_LIBS)

include_directories(OSMPServiceLib PUBLIC ${Boost_INCLUDE_DIRS})
include_directories(OSMPServiceLib PUBLIC ${PNG_INCLUDE_DIRS})

target_link_libraries(OSMPServiceLib PUBLIC ${Boost_LIBRARIES})
target_link_libraries(OSMPServiceLib PUBLIC ${PNG_LIBRARIES})

## generate grpc code
# custom grcp cpp code generation script that is easier to use than gRPC's default function
include(GenerateGRPC)
# gRPC can handle relative files
set(COSIMA_GRPC_PROTO_FILES
    ${CMAKE_SOURCE_DIR}/grpc_proto_files/CoSiMaMessages.proto
	${CMAKE_SOURCE_DIR}/grpc_proto_files/simulation_interface/SimulationInterface.proto
	${CMAKE_SOURCE_DIR}/grpc_proto_files/simulation_interface/OSMPSimulationInterface.proto
)

message("1: ${COSIMA_PROTO_SRCS}")
message("2: ${COSIMA_GRPC_SRCS}")
message("3: ${COSIMA_GRPC_PROTO_FILES}")
message("4: ${CMAKE_SOURCE_DIR}")
message("5: ${CONAN_INCLUDE_DIRS_PROTOBUF}")

add_library(OSMPGRPCLib ${COSIMA_PROTO_SRCS} ${COSIMA_GRPC_SRCS} ${COSIMA_GRPC_PROTO_FILES})

protobuf_generate(
 LANGUAGE cpp
 TARGET OSMPGRPCLib
 PROTOS ${COSIMA_GRPC_PROTO_FILES}
 APPEND_PATH)

if(BUILD_SHARED_LIBS)
	target_link_libraries(OSMPGRPCLib PUBLIC open_simulation_interface)
else()
	target_link_libraries(OSMPGRPCLib PUBLIC open_simulation_interface_static)
endif()
target_link_libraries(OSMPGRPCLib PUBLIC grpc++ grpc++_reflection)
target_include_directories(OSMPGRPCLib BEFORE PUBLIC ${CMAKE_BINARY_DIR}/gens )
target_link_libraries(OSMPServiceLib PUBLIC OSMPGRPCLib)
# previous include is supposed to propagate, but is missing...
target_include_directories(OSMPServiceLib BEFORE PUBLIC ${CMAKE_BINARY_DIR}/gens )# $<TARGET_PROPERTY:OSMPGRPCLib,INTERFACE_INCLUDE_DIRECTORIES>)

#add_executable(test_OSMPService ${TESTFILES})
#target_include_directories(test_OSMPService PUBLIC ${CMAKE_CURRENT_LIST_DIR}/include ${CMAKE_CURRENT_BINARY_DIR}/include ${CMAKE_BINARY_DIR}/gens)
#target_link_libraries(test_OSMPService PRIVATE OSMPServiceLib Catch2::Catch2WithMain OSMPGRPCLib)

#copy test resources to build folder
#add_custom_command(TARGET test_OSMPService PRE_BUILD
#                     COMMAND ${CMAKE_COMMAND} -E
#                         make_directory $<TARGET_FILE_DIR:test_OSMPService>/../test/resources/)
#Feedthrough_cs_me.fmu contains definitions for both me and cs => created copies with edited modelDescription.xml
#add_custom_command(TARGET test_OSMPService PRE_BUILD
#                     COMMAND ${CMAKE_COMMAND} -E
#                         copy_if_different
#						 ${CMAKE_CURRENT_LIST_DIR}/test/resources/OSMPCNetworkProxy.fmu
#						 ${CMAKE_CURRENT_LIST_DIR}/test/resources/OSMPDummySensor.fmu
#						 ${CMAKE_CURRENT_LIST_DIR}/test/resources/OSMPDummySource.fmu
#						 $<TARGET_FILE_DIR:test_OSMPService>/../test/resources/)

#include(CTest)
#target_link_libraries(test_OSMPService Catch2::Catch2WithMain)
#catch_discover_tests(test_OSMPService)

add_executable (OSMPService "${CMAKE_CURRENT_LIST_DIR}/src/OSMPService.cpp" "${CMAKE_CURRENT_LIST_DIR}/include/OSMPService.h")
if (${CMAKE_CXX_STANDARD} LESS 17 AND UNIX)
target_link_libraries(OSMPService PUBLIC OSMPServiceLib stdc++fs)
else()
target_link_libraries(OSMPService PUBLIC OSMPServiceLib)
endif()
